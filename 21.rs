extern crate itertools;
use itertools::Itertools;
use std::collections::HashMap;

fn main() {
    let x = r"../.. => ..#/#.#/###
#./.. => .#./#../###
##/.. => #.#/#.#/..#
.#/#. => .##/..#/#..
##/#. => #../#.#/#..
##/## => #.#/.#./#..
.../.../... => ####/##../#.../#...
#../.../... => ##.#/####/.#../....
.#./.../... => ...#/...#/#.../.##.
##./.../... => ###./#.##/#..#/...#
#.#/.../... => ##.#/###./.#.#/##..
###/.../... => .###/#..#/..##/.##.
.#./#../... => ####/#..#/#..#/#..#
##./#../... => #.##/###./##../#...
..#/#../... => ..##/.#.#/..#./.###
#.#/#../... => .##./.#../..#./###.
.##/#../... => ####/..../###./###.
###/#../... => .#.#/.###/##.#/#..#
.../.#./... => ..../.#../.##./..#.
#../.#./... => #.##/..#./####/#.##
.#./.#./... => .#.#/.###/#.#./.#.#
##./.#./... => #..#/#.#./...#/.###
#.#/.#./... => .##./#..#/####/.###
###/.#./... => #.../..../.#.#/##..
.#./##./... => #..#/..##/.##./.#.#
##./##./... => ..##/#..#/####/###.
..#/##./... => ####/.#.#/#.##/#.##
#.#/##./... => .###/...#/#.../...#
.##/##./... => ..##/.#.#/#.../##.#
###/##./... => ##../..#./..#./#...
.../#.#/... => .#.#/##../#..#/.#.#
#../#.#/... => #.##/...#/##../...#
.#./#.#/... => #.../..##/#..#/.##.
##./#.#/... => .##./..##/.#../..#.
#.#/#.#/... => .#../#..#/#.#./....
###/#.#/... => ##.#/..##/##../#...
.../###/... => #.../..#./##../#.##
#../###/... => ..#./#.../##../.##.
.#./###/... => ###./.#.#/..##/##.#
##./###/... => ##.#/#.../##.#/#.#.
#.#/###/... => ..##/...#/##../#..#
###/###/... => ##.#/.###/...#/#..#
..#/.../#.. => .##./#.##/..#./####
#.#/.../#.. => ..#./###./#.../##.#
.##/.../#.. => ...#/...#/.#../.###
###/.../#.. => .##./.#../##../#.#.
.##/#../#.. => ####/..##/#.../##..
###/#../#.. => #.../#..#/####/##..
..#/.#./#.. => .##./##.#/.#../###.
#.#/.#./#.. => ..../.###/###./.#.#
.##/.#./#.. => #.##/#..#/###./..#.
###/.#./#.. => #.../..#./##../.#.#
.##/##./#.. => .##./.#.#/#..#/#..#
###/##./#.. => .#../.#.#/#..#/....
#../..#/#.. => ####/..##/..##/.###
.#./..#/#.. => ###./.###/..#./##.#
##./..#/#.. => .###/####/#.../#.##
#.#/..#/#.. => #.##/#..#/.#.#/...#
.##/..#/#.. => #.../##../..##/##.#
###/..#/#.. => ###./##.#/#.../.#..
#../#.#/#.. => #.#./#.../##../..#.
.#./#.#/#.. => .###/#.#./...#/##.#
##./#.#/#.. => .#../#.##/##.#/#.#.
..#/#.#/#.. => .#../#..#/.#../.#.#
#.#/#.#/#.. => .#../.##./..../..#.
.##/#.#/#.. => .##./.#../####/#.##
###/#.#/#.. => ..#./##../##../#.#.
#../.##/#.. => #.##/.##./..#./..##
.#./.##/#.. => ###./#.#./#.../###.
##./.##/#.. => ####/#.../#.../#.#.
#.#/.##/#.. => .###/#..#/###./#..#
.##/.##/#.. => #.../####/###./###.
###/.##/#.. => .#../.#.#/##../.#..
#../###/#.. => ..#./.##./.###/##..
.#./###/#.. => ####/.##./####/....
##./###/#.. => #.../#.../#.##/.##.
..#/###/#.. => .#.#/.###/...#/....
#.#/###/#.. => ###./..##/.#../#.##
.##/###/#.. => ...#/.#../##../.#..
###/###/#.. => ...#/#.##/.#.#/..##
.#./#.#/.#. => .###/#.../..#./.##.
##./#.#/.#. => ###./##.#/..#./##.#
#.#/#.#/.#. => #.../##.#/..#./#...
###/#.#/.#. => ...#/...#/#..#/...#
.#./###/.#. => #.#./.##./#.#./.###
##./###/.#. => #.../####/..##/#...
#.#/###/.#. => ##../.##./.###/###.
###/###/.#. => ..#./.##./.#../#.#.
#.#/..#/##. => ...#/#.##/##../...#
###/..#/##. => ...#/#.../###./###.
.##/#.#/##. => ##.#/.#.#/.#../....
###/#.#/##. => .##./..../##.#/..#.
#.#/.##/##. => .#../###./#.#./##..
###/.##/##. => #.##/#..#/#.#./###.
.##/###/##. => #.##/###./..../##..
###/###/##. => .#../####/.###/##..
#.#/.../#.# => #.../#..#/..##/##.#
###/.../#.# => #..#/.#.#/####/#.##
###/#../#.# => ###./##../##.#/...#
#.#/.#./#.# => .##./.#.#/#.../...#
###/.#./#.# => .#../.#../..../#.#.
###/##./#.# => #.#./#.#./#.../.#..
#.#/#.#/#.# => ..../####/####/..#.
###/#.#/#.# => #..#/.##./#.../##..
#.#/###/#.# => ###./...#/#.##/##..
###/###/#.# => #.##/#.../#..#/###.
###/#.#/### => ..../...#/###./..#.
###/###/### => #..#/..../#.../#.##
";

    let rotate = |v: &Vec<char>, sz: usize| {
        (0..sz * sz)
            .map(|i| v[(sz - (i % sz) - 1) * sz + i / sz])
            .collect()
    };
    let flip = |v: &Vec<char>, sz: usize| {
        (0..sz * sz)
            .map(|i| v[(sz - (i / sz) - 1) * sz + i % sz])
            .collect()
    };
    let all = |v: &Vec<char>, sz: usize| {
        let mut x = Vec::new();
        let mut last = v.clone();
        for _ in 0..4 {
            x.push(flip(&last, sz));
            let t = rotate(&last, sz);
            x.push(last);
            last = t;
        }
        x
    };

    let mut hm = HashMap::new();

    for l in x.lines() {
        let v: Vec<_> = l.split(" => ").collect();
        let v1: Vec<_> = v[0].chars().filter(|&c| c != '/').collect();
        let v2: Vec<_> = v[1].chars().filter(|&c| c != '/').collect();
        for x in all(&v1, v[0].len() - v1.len() + 1) {
            hm.insert(x, v2.clone());
        }
    }

    let mut state: Vec<_> = ".#...####".chars().collect();
    let mut sz = 3;

    for steps in 0..18 {
        let sq = if sz % 2 == 0 { 2 } else { 3 };
        let newsz = sz / sq * (sq + 1);
        let mut newstate = vec![' '; newsz * newsz];
        for (i, j) in (0..sz / sq).cartesian_product(0..sz / sq) {
            let t: Vec<_> = (0..sq)
                .cartesian_product(0..sq)
                .map(|(a, b)| state[(i * sq + a) * sz + (j * sq + b)])
                .collect();
            let newt = &hm[&t];
            for (a, b) in (0..sq + 1).cartesian_product(0..sq + 1) {
                newstate[(i * (sq + 1) + a) * newsz + (j * (sq + 1) + b)] = newt[a * (sq + 1) + b];
            }
        }
        state = newstate;
        sz = newsz;

        if steps == 4 {
            let r1 = state.iter().filter(|&&c| c == '#').count();
            println!("{}", r1);
        }
    }

    let r2 = state.iter().filter(|&&c| c == '#').count();
    println!("{}", r2);
}

